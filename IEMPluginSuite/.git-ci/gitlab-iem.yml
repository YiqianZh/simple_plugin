# gitlab-ci configuration for the IEM Plugin Suite

variables:
## leave this uncommented to build all projects (except _PluginTemplate)
#  PROJECTS: AllRADecoder BinauralDecoder DirectionalCompressor DirectivityShaper DistanceCompensator DualDelay EnergyVisualizer FdnReverb MatrixMultiplier MultiEncoder OmniCompressor ProbeDecoder RoomEncoder SimpleDecoder StereoEncoder ToolBox

  CONFIG: Release
  JUCEVERSION: 5.4.5

###################################################
# cleanup after the job (e.g. rename files for the artifacts...)
.after_script:
  - test -d IEM && find IEM -type f -exec file {} +
  - find DualDelay/Builds/ -type f -exec file {} +

###################################################
### configuration templates (to be used for snapshot and release builds)
.build:snapshot: &snapshot
  only:
    - master
    - develop
  except:
    - tags
  artifacts: &snapshot_artifacts
    paths:
      - IEM
      - ChangeLog.md
    expire_in: 1 week

.build:release: &release
  only:
    - tags
  artifacts: &release_artifacts
    paths:
      - IEM
      - ChangeLog.md

.build:linux: &build_linux
  stage: build
  image: ubuntu:disco
  tags:
    - docker
  variables:
    PKGLIBS: jack fftw3f
  script:
# install dependencies
    - apt-get update -y
    - apt-get dist-upgrade -y
    - apt-get install -y --no-install-recommends xvfb xauth curl unzip build-essential ca-certificates
    - apt-get install -y --no-install-recommends libwebkit2gtk-4.0-dev libasound2-dev libfreetype6-dev libcurl4-gnutls-dev libgl1-mesa-dev libx11-dev libxext-dev libxinerama-dev libxrandr-dev libgtk-3-dev
    - apt-get install -y --no-install-recommends libjack-dev libfftw3-dev
    - .git-ci/getjuce.sh "${JUCEVERSION}-linux" ~/JUCE
    - xvfb-run -a ~/JUCE/Projucer --set-global-search-path linux defaultJuceModulePath ~/JUCE/modules/
# run the actual build
    - make system V=1 CONFIG=${CONFIG} CPPFLAGS=-DJUCE_JACK=1 CFLAGS="$(pkg-config --cflags ${PKGLIBS})" LDFLAGS="$(pkg-config --libs ${PKGLIBS})" PARALLEL=$(nproc) TARGET_ARCH=-march=core2 PROJUCER=~/JUCE/Projucer
    - xvfb-run -a make V=1 CONFIG=${CONFIG} CPPFLAGS=-DJUCE_JACK=1 CFLAGS="$(pkg-config --cflags ${PKGLIBS})" LDFLAGS="$(pkg-config --libs ${PKGLIBS})" PARALLEL=$(nproc) TARGET_ARCH=-march=core2 PROJUCER=~/JUCE/Projucer remove_intermediates=yes

# collect binaries for artifacts
    - mkdir -p IEM/standalone/
    - cp */Builds/*/build/*.so IEM/
    - find */Builds/*/build/ -maxdepth 1 -type f -executable -not -name "*.so" -exec cp {} IEM/standalone/ ";"

.build:osx: &build_osx
  stage: build
  tags:
    - osx10.14
  script:
# install dependencies
    - brew install fftw
    - brew install jack
    - .git-ci/getjuce.sh "${JUCEVERSION}-osx" ~/JUCE
# run the actual build
    - test -z "${PROJECTS}" && PROJECTS=$(make showprojects)
    - make system CONFIG=$CONFIG PROJUCER="~/JUCE/Projucer.app/Contents/MacOS/Projucer"
    - make CONFIG=$CONFIG PROJUCER="~/JUCE/Projucer.app/Contents/MacOS/Projucer" PROJECTS="${PROJECTS}" remove_intermediates=yes
# collect binaries for artifacts
    - mkdir -p IEM/standalone
    - cp -R -H */Builds/*/build/${CONFIG}/*.vst IEM/
    - cp -R -H */Builds/*/build/${CONFIG}/*.app IEM/standalone/
# embed non-standard libraries in the bundles
    - for f in IEM/*.vst/Contents/MacOS/*; do .git-ci/osx_embedlibs.sh "${f}"; done
    - for f in IEM/standalone/*.app/Contents/MacOS/*; do .git-ci/osx_embedlibs.sh "${f}"; done

.build:windows: &build_windows
  stage: build
  tags:
    - windows
  variables:
    IEMCI_CONFIGURATIONS: vs2017
  script:
    - test -f .myenv && . .myenv
# install dependencies
    - .git-ci/getjuce.sh "${JUCEVERSION}-windows" /c/JUCE
    - .git-ci/fftw4win.sh $BITS
# tell JUCE where to look for the vstheaders
    - /c/JUCE/Projucer --set-global-search-path windows vst3Path ";C:/JUCE/modules/juce_audio_processors/format_types/VST3_SDK/"
# run the actual build
    - test -z "${PROJECTS}" && PROJECTS=$(make showprojects)
    - make system CONFIG=$CONFIG BITS=$BITS PROJUCER="/c/JUCE/Projucer.exe"
    - make CONFIG=$CONFIG BITS=$BITS PROJUCER="/c/JUCE/Projucer.exe" PROJECTS="${PROJECTS}" remove_intermediates=yes
# collect binaries for artifacts
    - mkdir -p IEM/standalone
    - cp */Builds/*/*/*/VST/*.dll IEM/
    - cp */Builds/*/*/*/*/*.exe IEM/standalone/
# embed non-standard libraries in the bundles
# FIXME: this requires that we have either x64 or x86, not both
    - cp resources/fftw3/*/libfftwf*.dll IEM/standalone/
    - cp resources/fftw3/*/libfftwf*.dll IEM/

###################################################
# expand the templates to real jobs
#
# development snapshots
linux_snapshot:
  <<: *snapshot
  <<: *build_linux
  artifacts:
    <<: *snapshot_artifacts
    name: IEMPluginSuite_linux

osx_snapshot:
  <<: *build_osx
  <<: *snapshot
  artifacts:
    <<: *snapshot_artifacts
    name: IEMPluginSuite_macOS

windows32_snapshot:
  before_script:
    - echo "BITS=32" > .myenv
  <<: *build_windows
  <<: *snapshot
  artifacts:
    <<: *snapshot_artifacts
    name: IEMPluginSuite_w32

windows64_snapshot:
  before_script:
    - echo "BITS=64" > .myenv
  <<: *build_windows
  <<: *snapshot
  artifacts:
    <<: *snapshot_artifacts
    name: IEMPluginSuite_w64

# release builds (for tags; artifacts are kept forever)
linux_release:
  <<: *release
  <<: *build_linux
  artifacts:
    <<: *release_artifacts
    name: IEMPluginSuite_${CI_COMMIT_TAG}_linux

osx_release:
  <<: *build_osx
  <<: *release
  artifacts:
    <<: *release_artifacts
    name: IEMPluginSuite_${CI_COMMIT_TAG}_macOS

windows32_release:
  before_script:
    - echo "BITS=32" > .myenv
  <<: *build_windows
  <<: *release
  artifacts:
    <<: *release_artifacts
    name: IEMPluginSuite_${CI_COMMIT_TAG}_w32

windows64_release:
  before_script:
    - echo "BITS=64" > .myenv
  <<: *build_windows
  <<: *release
  artifacts:
    <<: *release_artifacts
    name: IEMPluginSuite_${CI_COMMIT_TAG}_w64
